{"version":3,"sources":["super-res.min.js","/source/super-res.js","/source/src/utils.js","/source/src/request.js","/source/src/ResourceAction.js","/source/src/super-res.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","superRes","Q","sa","methods","cacheManager","this","assignOptions","result","_len","arguments","opts","Array","_key","reduce","opt","isArray","concat","utils_js__assign","undefined","encodeUriSegment","val","encodeURIComponent","replace","forEach","obj","iterator","context","hasOwnProperty","call","parseUrl","url","params","urlParams","query","encodedVal","split","param","Error","RegExp","test","_","urlParam","match","p1","leadingSlashes","tail","charAt","value","getCacheKey","data","JSON","stringify","request","method","options","defaultOpts","curReq","accept","responseType","set","headers","timeout","clearTimeout","withCredentials","cache","defaultCache","originalEnd","end","fn","_this","_query","_data","doRequest","transformRequest","memo","transform","header","e","catchRequestError","promise","catchFunc","Promise","resolve","reject","then","err","res","catchResponseError","body","transformResponse","spread","get","moveDataToParam","generateDefaultActions","defaultParams","commonOptions","resource","action","ResourceAction","super_res__assign","makeRequest","bind","save","put","remove","caching","store","max","ttl","name","toUpperCase","req","send","ResourceAction_js__assign","actionDefaults","config","push","hasData","extraParams","slice","toLowerCase","_parseUrl","currentRequest","deferred","defer","extraP","p","fullParams","buildRequest","super_res__superRes","actions","getOwnPropertyNames","actionParams","apply","promiseWrapper","wrapperFunc","proxiedResource","actionFunction","_len2","args","_key2","super_res"],"mappings":"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","file":"super-res.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('q'), require('superagent'), require('methods'), require('cache-manager')) :\n  typeof define === 'function' && define.amd ? define(['q', 'superagent', 'methods', 'cache-manager'], factory) :\n  global.superRes = factory(global.Q, global.sa, global.methods, global.cacheManager)\n}(this, function (Q, sa, methods, cacheManager) { 'use strict';\n\n  var utils_js__assign = utils_js__assign || require('object.assign');\n\n  function assignOptions(...opts) {\n    let result = {};\n\n    opts.reduce((result, opt)=> {\n      if(opt) {\n        for(let i in opt) {\n          if(typeof opt[i] === 'object' && opt[i] !== null) {\n            if(Array.isArray(opt[i])) {\n              if(!Array.isArray(result[i])) {\n                result[i] = [];\n              }\n              result[i] = result[i].concat(opt[i]);\n\n            } else {\n              if(typeof result[i] !== 'object' || result[i] === null || Array.isArray(result[i])) {\n                result[i] = {};\n              }\n              utils_js__assign(result[i], opt[i]); //1 depth merging only.\n            }\n          } else {\n            opt[i] !== undefined && (result[i] = opt[i]);\n          }\n        }\n      }\n      return result;\n    }, result);\n\n    return result;\n  }\n\n  function encodeUriSegment(val) {\n    return encodeURIComponent(val).\n      replace(/%40/gi, '@').\n      replace(/%3A/gi, ':').\n      replace(/%24/g, '$').\n      replace(/%2C/gi, ',').\n      replace(/%20/g, '%20').\n      replace(/%26/gi, '&').\n      replace(/%3D/gi, '=').\n      replace(/%2B/gi, '+');\n  }\n\n  function forEach(obj, iterator, context) {\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        iterator.call(context, obj[key], key, obj);\n      }\n    }\n    return obj;\n  }\n\n  function parseUrl (url, params) {\n\n    let urlParams = {}, val, query, encodedVal;\n\n    forEach(url.split(/\\W/), function(param) {\n      if (param === 'hasOwnProperty') {\n        throw new Error('badname: hasOwnProperty is not a valid parameter name.');\n      }\n      if (!(new RegExp('^\\\\d+$').test(param)) && param &&\n        (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url))) {\n        urlParams[param] = true;\n      }\n    });\n    url = url.replace(/\\\\:/g, ':');\n\n    params = params || {};\n    forEach(urlParams, function(_, urlParam) {\n      val = params[urlParam];\n      if (typeof val !== 'undefined' && val !== null) {\n        encodedVal = encodeUriSegment(val);\n        url = url.replace(new RegExp(':' + urlParam + '(\\\\W|$)', 'g'), function(match, p1) {\n          return encodedVal + p1;\n        });\n      } else {\n        url = url.replace(new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g'), function(match,\n                                                                                     leadingSlashes, tail) {\n          if (tail.charAt(0) == '/') {\n            return tail;\n          } else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    // strip trailing slashes and set the url (unless this behavior is specifically disabled)\n    url = url.replace(/\\/+$/, '') || '/';\n\n    // then replace collapse `/.` if found in the last URL path segment before the query\n    // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    url = url.replace(/\\/\\.(?=\\w+($|\\?))/, '.');\n    // replace escaped `/\\.` with `/.`\n    url = url.replace(/\\/\\\\\\./, '/.');\n\n\n    // set params - delegate param encoding to $http\n    forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        query || (query = {});\n        query[key] = value;\n      }\n    });\n\n    return {\n      url: url,\n      query: query\n    }\n  }\n\n  const defaultOpts = {\n    responseType: 'json',\n    headers: {},\n    transformRequest: [],\n    catchRequestError: [],\n    transformResponse: [],\n    catchResponseError: [],\n    withCredentials: false,\n    cache: null\n  };\n\n  const defaultCache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n\n  function getCacheKey(url, params, data) {\n    return `${url}_${(typeof params === 'string') ? params : JSON.stringify(params || {})}_${(typeof data === 'string') ? data : JSON.stringify(data || {})}`;\n  }\n\n  function request (method, url, options) {\n    options = assignOptions(defaultOpts, options);\n\n    let curReq = sa(method, url);\n    curReq.accept(options.responseType);\n    curReq.set(options.headers);\n\n    if (options.timeout) {\n      curReq.timeout(options.timeout);\n    } else {\n      curReq.clearTimeout();\n    }\n\n    if (options.withCredentials) {\n      curReq.withCredentials();\n    }\n\n    if (options.cache == true) {\n      options.cache = defaultCache;\n    }\n\n    let originalEnd = curReq.end;\n    curReq.end = function (fn) {\n      let key;\n      options.cache && (key = getCacheKey(this.url, this._query, this._data));\n\n      let doRequest = () => {\n        if (curReq._data && typeof curReq._data === 'object') {\n          try {\n            curReq._data = options.transformRequest.reduce(\n              (memo, transform) => transform.call(curReq, memo, curReq.header),\n              curReq._data\n            );\n          } catch (e) {\n            options.catchRequestError.reduce(\n              (promise, catchFunc) => promise.catch(catchFunc),\n              Q.Promise((resolve, reject) => reject(e))\n            )\n              .then(fn, fn);\n            return this;\n          }\n        }\n\n        return originalEnd.call(curReq, (err, res)=> {\n          if (err) {\n            options.catchResponseError.reduce(\n              (promise, catchFunc) => promise.catch(catchFunc),\n              Q.Promise((resolve, reject) => reject(err))\n            )\n              .then(fn, fn);\n          } else {\n            try {\n              res.body = options.transformResponse.reduce(\n                (memo, transform) => transform.call(res, memo),\n                res.body\n              );\n\n              if (options.cache) {\n                options.cache.set(key, res);\n              }\n\n            } catch (e) {\n              return Q(e).then(fn);\n            }\n            Q.spread([null, res], fn);\n          }\n        });\n      };\n\n      if (options.cache && this.method === 'GET') {\n        options.cache.get(key, (err, result) => {\n          if (err || result) {\n            Q.spread([err, result], fn);\n            return this;\n          } else {\n            return doRequest();\n          }\n        });\n      } else {\n        return doRequest();\n      }\n\n    };\n\n    return curReq;\n  }\n\n  methods.forEach(function(method){\n    var name = 'delete' == method ? 'del' : method;\n    method = method.toUpperCase();\n    Object.defineProperty(request, name, {\n      value: function(url, data, fn, options){\n        if ('function' === typeof data) {\n          options = fn;\n          fn = data;\n          data = null;\n        }\n        var req = request(method, url, options);\n        if (data) {\n          req.send(data);\n        }\n        fn && req.end(fn);\n        return req;\n      },\n      enumerable: true\n    });\n  });\n\n  Object.defineProperty(request, 'config', {\n    value: defaultOpts\n  });\n\n  var ResourceAction_js__assign = ResourceAction_js__assign || require('object.assign');\n\n  const actionDefaults = {\n    method: 'GET',\n    transformRequest: []\n  };\n\n  function moveDataToParam(data, header) {\n    data && this.query(data);\n    return null\n  }\n\n  class ResourceAction {\n    constructor(url, defaultParams, action) {\n      this.config = assignOptions({url: url}, actionDefaults, action);\n\n      if(this.config.method === 'GET') {\n        this.config.transformRequest || (this.config.transformRequest = []);\n        this.config.transformRequest.push(moveDataToParam);\n      } else if((this.config.method === 'POST' ||\n        this.config.method === 'PUT' ||\n        this.config.method === 'PATCH')) {\n        this.hasData = true;\n      }\n\n      this.defaultParams = defaultParams;\n\n      this.extraParams = {};\n      for(let i in defaultParams) {\n        let param = defaultParams[i];\n        if(typeof param === 'function') {\n          this.extraParams[i] = param;\n        } else if(typeof param === 'string' && param[0] === '@') {\n          this.extraParams[i] = param.slice(1);\n        } else {\n          continue;\n        }\n        delete this.defaultParams[i];\n      }\n    }\n\n    buildRequest(params, data) {\n      let method = this.config.method.toLowerCase();\n      let {url, query} = parseUrl(this.config.url, params);\n\n      let currentRequest = request[method === 'delete' ? 'del' : method](url, null, null, this.config);\n\n      if(query) {\n        currentRequest.query(query);\n      }\n\n      if (data) {\n        currentRequest.send(data);\n      }\n\n      return currentRequest;\n    }\n    makeRequest(params, data) {\n      let deferred = Q.defer();\n\n      if(arguments.length == 1 && this.hasData) {\n        data = params;\n        params = undefined;\n      }\n\n      let extraP = {};\n      for(let i in this.extraParams) {\n        let p = this.extraParams[i], result;\n        if(typeof p === 'function') {\n          result = p();\n        } else {\n          result = data[p];\n        }\n        result && (extraP[i] = result);\n      }\n\n      let fullParams = ResourceAction_js__assign({}, this.defaultParams, extraP, params);\n\n      this.buildRequest(fullParams, data)\n        .end((err, res) => {\n          if (err) {\n            deferred.reject(err);\n          } else {\n            deferred.resolve(res.body);\n          }\n        });\n\n      return deferred.promise;\n    }\n  }\n\n  var super_res__assign = super_res__assign || require('object.assign');\n\n  let super_res__superRes = {};\n\n  function generateDefaultActions(url, defaultParams, commonOptions) {\n    let resource = {};\n\n    let action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions));\n    resource.get = action.makeRequest.bind(action);\n    resource.query = resource.get;\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'POST'}));\n    resource.save = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'PUT'}));\n    resource.put = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'DELETE'}));\n    resource.remove = action.makeRequest.bind(action);\n    resource['delete'] = resource.remove;\n\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions, commonOptions) => {\n    let resource = generateDefaultActions(url, defaultParams, commonOptions);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        let params = defaultParams;\n        let actionParams = actions[name].params;\n        if(actionParams && typeof actionParams === 'object') {\n          params = super_res__assign({}, defaultParams, actionParams);\n          delete actions[name].params;\n        }\n        let action = new ResourceAction(url, params, super_res__assign({}, commonOptions, actions[name]));\n        resource[name] = function (...args) {\n          action.makeRequest(...args);\n        }\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.request = request;\n  super_res__superRes.config = request.config;\n\n  super_res__superRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n    return (resource) => {\n      let proxiedResource = super_res__assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return wrapperFunc(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","var assign = assign || require('object.assign');\n\nexport function assignOptions(...opts) {\n  let result = {};\n\n  opts.reduce((result, opt)=> {\n    if(opt) {\n      for(let i in opt) {\n        if(typeof opt[i] === 'object' && opt[i] !== null) {\n          if(Array.isArray(opt[i])) {\n            if(!Array.isArray(result[i])) {\n              result[i] = [];\n            }\n            result[i] = result[i].concat(opt[i]);\n\n          } else {\n            if(typeof result[i] !== 'object' || result[i] === null || Array.isArray(result[i])) {\n              result[i] = {};\n            }\n            assign(result[i], opt[i]); //1 depth merging only.\n          }\n        } else {\n          opt[i] !== undefined && (result[i] = opt[i]);\n        }\n      }\n    }\n    return result;\n  }, result);\n\n  return result;\n}\n\nfunction encodeUriSegment(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '%20').\n    replace(/%26/gi, '&').\n    replace(/%3D/gi, '=').\n    replace(/%2B/gi, '+');\n}\n\nfunction forEach(obj, iterator, context) {\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      iterator.call(context, obj[key], key, obj);\n    }\n  }\n  return obj;\n}\n\nexport function parseUrl (url, params) {\n\n  let urlParams = {}, val, query, encodedVal;\n\n  forEach(url.split(/\\W/), function(param) {\n    if (param === 'hasOwnProperty') {\n      throw new Error('badname: hasOwnProperty is not a valid parameter name.');\n    }\n    if (!(new RegExp('^\\\\d+$').test(param)) && param &&\n      (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url))) {\n      urlParams[param] = true;\n    }\n  });\n  url = url.replace(/\\\\:/g, ':');\n\n  params = params || {};\n  forEach(urlParams, function(_, urlParam) {\n    val = params[urlParam];\n    if (typeof val !== 'undefined' && val !== null) {\n      encodedVal = encodeUriSegment(val);\n      url = url.replace(new RegExp(':' + urlParam + '(\\\\W|$)', 'g'), function(match, p1) {\n        return encodedVal + p1;\n      });\n    } else {\n      url = url.replace(new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g'), function(match,\n                                                                                   leadingSlashes, tail) {\n        if (tail.charAt(0) == '/') {\n          return tail;\n        } else {\n          return leadingSlashes + tail;\n        }\n      });\n    }\n  });\n\n  // strip trailing slashes and set the url (unless this behavior is specifically disabled)\n  url = url.replace(/\\/+$/, '') || '/';\n\n  // then replace collapse `/.` if found in the last URL path segment before the query\n  // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n  url = url.replace(/\\/\\.(?=\\w+($|\\?))/, '.');\n  // replace escaped `/\\.` with `/.`\n  url = url.replace(/\\/\\\\\\./, '/.');\n\n\n  // set params - delegate param encoding to $http\n  forEach(params, function(value, key) {\n    if (!urlParams[key]) {\n      query || (query = {});\n      query[key] = value;\n    }\n  });\n\n  return {\n    url: url,\n    query: query\n  }\n}","import Q from 'q';\nimport sa from 'superagent';\nimport methods from 'methods';\nimport cacheManager from 'cache-manager';\nimport {assignOptions} from './utils.js';\n\nconst defaultOpts = {\n  responseType: 'json',\n  headers: {},\n  transformRequest: [],\n  catchRequestError: [],\n  transformResponse: [],\n  catchResponseError: [],\n  withCredentials: false,\n  cache: null\n};\n\nconst defaultCache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n\nfunction getCacheKey(url, params, data) {\n  return `${url}_${(typeof params === 'string') ? params : JSON.stringify(params || {})}_${(typeof data === 'string') ? data : JSON.stringify(data || {})}`;\n}\n\nfunction request (method, url, options) {\n  options = assignOptions(defaultOpts, options);\n\n  let curReq = sa(method, url);\n  curReq.accept(options.responseType);\n  curReq.set(options.headers);\n\n  if (options.timeout) {\n    curReq.timeout(options.timeout);\n  } else {\n    curReq.clearTimeout();\n  }\n\n  if (options.withCredentials) {\n    curReq.withCredentials();\n  }\n\n  if (options.cache == true) {\n    options.cache = defaultCache;\n  }\n\n  let originalEnd = curReq.end;\n  curReq.end = function (fn) {\n    let key;\n    options.cache && (key = getCacheKey(this.url, this._query, this._data));\n\n    let doRequest = () => {\n      if (curReq._data && typeof curReq._data === 'object') {\n        try {\n          curReq._data = options.transformRequest.reduce(\n            (memo, transform) => transform.call(curReq, memo, curReq.header),\n            curReq._data\n          );\n        } catch (e) {\n          options.catchRequestError.reduce(\n            (promise, catchFunc) => promise.catch(catchFunc),\n            Q.Promise((resolve, reject) => reject(e))\n          )\n            .then(fn, fn);\n          return this;\n        }\n      }\n\n      return originalEnd.call(curReq, (err, res)=> {\n        if (err) {\n          options.catchResponseError.reduce(\n            (promise, catchFunc) => promise.catch(catchFunc),\n            Q.Promise((resolve, reject) => reject(err))\n          )\n            .then(fn, fn);\n        } else {\n          try {\n            res.body = options.transformResponse.reduce(\n              (memo, transform) => transform.call(res, memo),\n              res.body\n            );\n\n            if (options.cache) {\n              options.cache.set(key, res);\n            }\n\n          } catch (e) {\n            return Q(e).then(fn);\n          }\n          Q.spread([null, res], fn);\n        }\n      });\n    };\n\n    if (options.cache && this.method === 'GET') {\n      options.cache.get(key, (err, result) => {\n        if (err || result) {\n          Q.spread([err, result], fn);\n          return this;\n        } else {\n          return doRequest();\n        }\n      });\n    } else {\n      return doRequest();\n    }\n\n  };\n\n  return curReq;\n}\n\nmethods.forEach(function(method){\n  var name = 'delete' == method ? 'del' : method;\n  method = method.toUpperCase();\n  Object.defineProperty(request, name, {\n    value: function(url, data, fn, options){\n      if ('function' === typeof data) {\n        options = fn;\n        fn = data;\n        data = null;\n      }\n      var req = request(method, url, options);\n      if (data) {\n        req.send(data);\n      }\n      fn && req.end(fn);\n      return req;\n    },\n    enumerable: true\n  });\n});\n\nObject.defineProperty(request, 'config', {\n  value: defaultOpts\n});\n\nexport default request;","var assign = assign || require('object.assign');\n\nimport Q from 'q';\n\nimport request from './request.js';\nimport {assignOptions, parseUrl} from './utils.js'\n\nconst actionDefaults = {\n  method: 'GET',\n  transformRequest: []\n};\n\nfunction moveDataToParam(data, header) {\n  data && this.query(data);\n  return null\n}\n\nexport default class ResourceAction {\n  constructor(url, defaultParams, action) {\n    this.config = assignOptions({url: url}, actionDefaults, action);\n\n    if(this.config.method === 'GET') {\n      this.config.transformRequest || (this.config.transformRequest = []);\n      this.config.transformRequest.push(moveDataToParam);\n    } else if((this.config.method === 'POST' ||\n      this.config.method === 'PUT' ||\n      this.config.method === 'PATCH')) {\n      this.hasData = true;\n    }\n\n    this.defaultParams = defaultParams;\n\n    this.extraParams = {};\n    for(let i in defaultParams) {\n      let param = defaultParams[i];\n      if(typeof param === 'function') {\n        this.extraParams[i] = param;\n      } else if(typeof param === 'string' && param[0] === '@') {\n        this.extraParams[i] = param.slice(1);\n      } else {\n        continue;\n      }\n      delete this.defaultParams[i];\n    }\n  }\n\n  buildRequest(params, data) {\n    let method = this.config.method.toLowerCase();\n    let {url, query} = parseUrl(this.config.url, params);\n\n    let currentRequest = request[method === 'delete' ? 'del' : method](url, null, null, this.config);\n\n    if(query) {\n      currentRequest.query(query);\n    }\n\n    if (data) {\n      currentRequest.send(data);\n    }\n\n    return currentRequest;\n  }\n  makeRequest(params, data) {\n    let deferred = Q.defer();\n\n    if(arguments.length == 1 && this.hasData) {\n      data = params;\n      params = undefined;\n    }\n\n    let extraP = {};\n    for(let i in this.extraParams) {\n      let p = this.extraParams[i], result;\n      if(typeof p === 'function') {\n        result = p();\n      } else {\n        result = data[p];\n      }\n      result && (extraP[i] = result);\n    }\n\n    let fullParams = assign({}, this.defaultParams, extraP, params);\n\n    this.buildRequest(fullParams, data)\n      .end((err, res) => {\n        if (err) {\n          deferred.reject(err);\n        } else {\n          deferred.resolve(res.body);\n        }\n      });\n\n    return deferred.promise;\n  }\n}","var assign = assign || require('object.assign');\n\nimport Q from 'q';\n\nimport ResourceAction from './ResourceAction.js';\nimport request from './request.js';\n\nlet superRes = {};\n\nfunction generateDefaultActions(url, defaultParams, commonOptions) {\n  let resource = {};\n\n  let action = new ResourceAction(url, defaultParams, assign({}, commonOptions));\n  resource.get = action.makeRequest.bind(action);\n  resource.query = resource.get;\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'POST'}));\n  resource.save = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'PUT'}));\n  resource.put = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'DELETE'}));\n  resource.remove = action.makeRequest.bind(action);\n  resource['delete'] = resource.remove;\n\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions, commonOptions) => {\n  let resource = generateDefaultActions(url, defaultParams, commonOptions);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      let params = defaultParams;\n      let actionParams = actions[name].params;\n      if(actionParams && typeof actionParams === 'object') {\n        params = assign({}, defaultParams, actionParams);\n        delete actions[name].params;\n      }\n      let action = new ResourceAction(url, params, assign({}, commonOptions, actions[name]));\n      resource[name] = function (...args) {\n        action.makeRequest(...args);\n      }\n    });\n  }\n  return resource;\n};\n\nsuperRes.request = request;\nsuperRes.config = request.config;\n\nsuperRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n  return (resource) => {\n    let proxiedResource = assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return wrapperFunc(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n"],"sourceRoot":"/source/"}