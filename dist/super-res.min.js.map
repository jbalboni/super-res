{"version":3,"sources":["super-res.min.js","/source/super-res.js","/source/src/utils.js","/source/src/request.js","/source/src/ResourceAction.js","/source/src/super-res.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","superRes","Q","Route","sa","methods","cacheManager","this","assignOptions","result","_len","arguments","opts","Array","_key","reduce","opt","isArray","concat","utils_js__assign","undefined","getCacheKey","url","params","data","JSON","stringify","request","method","options","defaultOpts","curReq","accept","responseType","headers","set","timeout","clearTimeout","withCredentials","cache","defaultCache","originalEnd","end","fn","_this","_query","_data","doRequest","transformRequest","memo","transform","call","header","e","catchRequestError","promise","catchFunc","Promise","resolve","reject","then","err","res","catchResponseError","body","transformResponse","spread","get","moveDataToParam","query","generateDefaultActions","defaultParams","commonOptions","resource","action","ResourceAction","super_res__assign","makeRequest","bind","save","put","remove","caching","store","max","ttl","forEach","name","toUpperCase","value","req","send","ResourceAction_js__assign","actionDefaults","config","push","hasData","route","extraParams","param","slice","toLowerCase","reverse","match","empty","currentRequest","deferred","defer","extraP","p","fullParams","buildRequest","super_res__superRes","actions","getOwnPropertyNames","apply","promiseWrapper","wrapperFunc","proxiedResource","actionFunction","_len2","args","_key2","super_res"],"mappings":"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","file":"super-res.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('q'), require('route-parser'), require('superagent'), require('methods'), require('cache-manager')) :\n  typeof define === 'function' && define.amd ? define(['q', 'route-parser', 'superagent', 'methods', 'cache-manager'], factory) :\n  global.superRes = factory(global.Q, global.Route, global.sa, global.methods, global.cacheManager)\n}(this, function (Q, Route, sa, methods, cacheManager) { 'use strict';\n\n  var utils_js__assign = utils_js__assign || require('object.assign');\n\n  function assignOptions(...opts) {\n    let result = {};\n\n    opts.reduce((result, opt)=> {\n      if(opt) {\n        for(let i in opt) {\n          if(typeof opt[i] === 'object' && opt[i] !== null) {\n            if(Array.isArray(opt[i])) {\n              if(!Array.isArray(result[i])) {\n                result[i] = [];\n              }\n              result[i] = result[i].concat(opt[i]);\n\n            } else {\n              if(typeof result[i] !== 'object' || result[i] === null || Array.isArray(result[i])) {\n                result[i] = {};\n              }\n              utils_js__assign(result[i], opt[i]); //1 depth merging only.\n            }\n          } else {\n            opt[i] !== undefined && (result[i] = opt[i]);\n          }\n        }\n      }\n      return result;\n    }, result);\n\n    return result;\n  }\n\n  const defaultOpts = {\n    responseType: 'json',\n    transformRequest: [],\n    catchRequestError: [],\n    transformResponse: [],\n    catchResponseError: [],\n    withCredentials: false,\n    cache: null\n  };\n\n  const defaultCache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n\n  function getCacheKey(url, params, data) {\n    return `${url}_${(typeof params === 'string') ? params : JSON.stringify(params || {})}_${(typeof data === 'string') ? data : JSON.stringify(data || {})}`;\n  }\n\n  function request (method, url, options) {\n    options = assignOptions(defaultOpts, options);\n\n    let curReq = sa(method, url);\n    curReq.accept(options.responseType);\n    if (options.headers) {\n      curReq.set(options.headers);\n    }\n\n    if (options.timeout) {\n      curReq.timeout(options.timeout);\n    } else {\n      curReq.clearTimeout();\n    }\n\n    if (options.withCredentials) {\n      curReq.withCredentials();\n    }\n\n    if (options.cache == true) {\n      options.cache = defaultCache;\n    }\n\n    let originalEnd = curReq.end;\n    curReq.end = function (fn) {\n      let key;\n      options.cache && (key = getCacheKey(this.url, this._query, this._data));\n\n      let doRequest = () => {\n        if (curReq._data && typeof curReq._data === 'object') {\n          try {\n            curReq._data = options.transformRequest.reduce(\n              (memo, transform) => transform.call(curReq, memo, curReq.header),\n              curReq._data\n            );\n          } catch (e) {\n            options.catchRequestError.reduce(\n              (promise, catchFunc) => promise.catch(catchFunc),\n              Q.Promise((resolve, reject) => reject(e))\n            )\n              .then(fn, fn);\n            return this;\n          }\n        }\n\n        return originalEnd.call(curReq, (err, res)=> {\n          if (err) {\n            options.catchResponseError.reduce(\n              (promise, catchFunc) => promise.catch(catchFunc),\n              Q.Promise((resolve, reject) => reject(err))\n            )\n              .then(fn, fn);\n          } else {\n            try {\n              res.body = options.transformResponse.reduce(\n                (memo, transform) => transform.call(res, memo),\n                res.body\n              );\n\n              if (options.cache) {\n                options.cache.set(key, res);\n              }\n\n            } catch (e) {\n              return Q(e).then(fn);\n            }\n            Q.spread([null, res], fn);\n          }\n        });\n      };\n\n      if (options.cache && this.method === 'GET') {\n        options.cache.get(key, (err, result) => {\n          if (err || result) {\n            Q.spread([err, result], fn);\n            return this;\n          } else {\n            return doRequest();\n          }\n        });\n      } else {\n        return doRequest();\n      }\n\n    };\n\n    return curReq;\n  }\n\n  methods.forEach(function(method){\n    var name = 'delete' == method ? 'del' : method;\n    method = method.toUpperCase();\n    Object.defineProperty(request, name, {\n      value: function(url, data, fn, options){\n        if ('function' === typeof data) {\n          options = fn;\n          fn = data;\n          data = null;\n        }\n        var req = request(method, url, options);\n        if (data) {\n          req.send(data);\n        }\n        fn && req.end(fn);\n        return req;\n      },\n      enumerable: true\n    });\n  });\n\n  Object.defineProperty(request, 'config', {\n    value: defaultOpts\n  });\n\n  var ResourceAction_js__assign = ResourceAction_js__assign || require('object.assign');\n\n  const actionDefaults = {\n    method: 'GET',\n    transformRequest: []\n  };\n\n  function moveDataToParam(data, header) {\n    data && this.query(data);\n    return null\n  }\n\n  class ResourceAction {\n    constructor(url, defaultParams, action) {\n      this.config = assignOptions({url: url}, actionDefaults, action);\n\n      if(this.config.method === 'GET') {\n        this.config.transformRequest || (this.config.transformRequest = []);\n        this.config.transformRequest.push(moveDataToParam);\n      } else if((this.config.method === 'POST' ||\n        this.config.method === 'PUT' ||\n        this.config.method === 'PATCH')) {\n        this.hasData = true;\n      }\n\n      this.route = new Route(this.config.url);\n      this.defaultParams = defaultParams;\n\n      this.extraParams = {};\n      for(let i in defaultParams) {\n        let param = defaultParams[i];\n        if(typeof param === 'function') {\n          this.extraParams[i] = param;\n        } else if(typeof param === 'string' && param[0] === '@') {\n          this.extraParams[i] = param.slice(1);\n        } else {\n          continue;\n        }\n        delete this.defaultParams[i];\n      }\n    }\n\n    buildRequest(params, data) {\n      let method = this.config.method.toLowerCase();\n      let url = this.route.reverse(params);\n\n      for(let i in this.route.match(url)) {\n        delete params[i];\n      }\n      let empty = true;\n      if(params) {\n        for(let i in params) {\n          empty = false;\n          break;\n        }\n      }\n\n      let currentRequest = request[method === 'delete' ? 'del' : method](url, null, null, this.config);\n\n      if(!empty) {\n        currentRequest.query(params);\n      }\n\n      if (data) {\n        currentRequest.send(data);\n      }\n\n      return currentRequest;\n    }\n    makeRequest(params, data) {\n      let deferred = Q.defer();\n\n      if(arguments.length == 1 && this.hasData) {\n        data = params;\n        params = undefined;\n      }\n\n      let extraP = {};\n      for(let i in this.extraParams) {\n        let p = this.extraParams[i], result;\n        if(typeof p === 'function') {\n          result = p();\n        } else {\n          result = data[p];\n        }\n        result && (extraP[i] = result);\n      }\n\n      let fullParams = ResourceAction_js__assign({}, this.defaultParams, extraP, params);\n\n      this.buildRequest(fullParams, data)\n        .end((err, res) => {\n          if (err) {\n            deferred.reject(err);\n          } else {\n            deferred.resolve(res.body);\n          }\n        });\n\n      return deferred.promise;\n    }\n  }\n\n  var super_res__assign = super_res__assign || require('object.assign');\n\n  let super_res__superRes = {};\n\n  function generateDefaultActions(url, defaultParams, commonOptions) {\n    let resource = {};\n\n    let action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions));\n    resource.get = action.makeRequest.bind(action);\n    resource.query = resource.get;\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'POST'}));\n    resource.save = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'PUT'}));\n    resource.put = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'DELETE'}));\n    resource.remove = action.makeRequest.bind(action);\n    resource['delete'] = resource.remove;\n\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions, commonOptions) => {\n    let resource = generateDefaultActions(url, defaultParams, commonOptions);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        let action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, actions[name]));\n        resource[name] = function (...args) {\n          action.makeRequest(...args);\n        }\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.request = request;\n  super_res__superRes.config = request.config;\n\n  super_res__superRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n    return (resource) => {\n      let proxiedResource = super_res__assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return wrapperFunc(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","var assign = assign || require('object.assign');\n\nexport function assignOptions(...opts) {\n  let result = {};\n\n  opts.reduce((result, opt)=> {\n    if(opt) {\n      for(let i in opt) {\n        if(typeof opt[i] === 'object' && opt[i] !== null) {\n          if(Array.isArray(opt[i])) {\n            if(!Array.isArray(result[i])) {\n              result[i] = [];\n            }\n            result[i] = result[i].concat(opt[i]);\n\n          } else {\n            if(typeof result[i] !== 'object' || result[i] === null || Array.isArray(result[i])) {\n              result[i] = {};\n            }\n            assign(result[i], opt[i]); //1 depth merging only.\n          }\n        } else {\n          opt[i] !== undefined && (result[i] = opt[i]);\n        }\n      }\n    }\n    return result;\n  }, result);\n\n  return result;\n}","import Q from 'q';\nimport sa from 'superagent';\nimport methods from 'methods';\nimport cacheManager from 'cache-manager';\nimport {assignOptions} from './utils.js';\n\nconst defaultOpts = {\n  responseType: 'json',\n  transformRequest: [],\n  catchRequestError: [],\n  transformResponse: [],\n  catchResponseError: [],\n  withCredentials: false,\n  cache: null\n};\n\nconst defaultCache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n\nfunction getCacheKey(url, params, data) {\n  return `${url}_${(typeof params === 'string') ? params : JSON.stringify(params || {})}_${(typeof data === 'string') ? data : JSON.stringify(data || {})}`;\n}\n\nfunction request (method, url, options) {\n  options = assignOptions(defaultOpts, options);\n\n  let curReq = sa(method, url);\n  curReq.accept(options.responseType);\n  if (options.headers) {\n    curReq.set(options.headers);\n  }\n\n  if (options.timeout) {\n    curReq.timeout(options.timeout);\n  } else {\n    curReq.clearTimeout();\n  }\n\n  if (options.withCredentials) {\n    curReq.withCredentials();\n  }\n\n  if (options.cache == true) {\n    options.cache = defaultCache;\n  }\n\n  let originalEnd = curReq.end;\n  curReq.end = function (fn) {\n    let key;\n    options.cache && (key = getCacheKey(this.url, this._query, this._data));\n\n    let doRequest = () => {\n      if (curReq._data && typeof curReq._data === 'object') {\n        try {\n          curReq._data = options.transformRequest.reduce(\n            (memo, transform) => transform.call(curReq, memo, curReq.header),\n            curReq._data\n          );\n        } catch (e) {\n          options.catchRequestError.reduce(\n            (promise, catchFunc) => promise.catch(catchFunc),\n            Q.Promise((resolve, reject) => reject(e))\n          )\n            .then(fn, fn);\n          return this;\n        }\n      }\n\n      return originalEnd.call(curReq, (err, res)=> {\n        if (err) {\n          options.catchResponseError.reduce(\n            (promise, catchFunc) => promise.catch(catchFunc),\n            Q.Promise((resolve, reject) => reject(err))\n          )\n            .then(fn, fn);\n        } else {\n          try {\n            res.body = options.transformResponse.reduce(\n              (memo, transform) => transform.call(res, memo),\n              res.body\n            );\n\n            if (options.cache) {\n              options.cache.set(key, res);\n            }\n\n          } catch (e) {\n            return Q(e).then(fn);\n          }\n          Q.spread([null, res], fn);\n        }\n      });\n    };\n\n    if (options.cache && this.method === 'GET') {\n      options.cache.get(key, (err, result) => {\n        if (err || result) {\n          Q.spread([err, result], fn);\n          return this;\n        } else {\n          return doRequest();\n        }\n      });\n    } else {\n      return doRequest();\n    }\n\n  };\n\n  return curReq;\n}\n\nmethods.forEach(function(method){\n  var name = 'delete' == method ? 'del' : method;\n  method = method.toUpperCase();\n  Object.defineProperty(request, name, {\n    value: function(url, data, fn, options){\n      if ('function' === typeof data) {\n        options = fn;\n        fn = data;\n        data = null;\n      }\n      var req = request(method, url, options);\n      if (data) {\n        req.send(data);\n      }\n      fn && req.end(fn);\n      return req;\n    },\n    enumerable: true\n  });\n});\n\nObject.defineProperty(request, 'config', {\n  value: defaultOpts\n});\n\nexport default request;","var assign = assign || require('object.assign');\n\nimport Q from 'q';\nimport Route from 'route-parser';\n\nimport request from './request.js';\nimport {assignOptions} from './utils.js'\n\nconst actionDefaults = {\n  method: 'GET',\n  transformRequest: []\n};\n\nfunction moveDataToParam(data, header) {\n  data && this.query(data);\n  return null\n}\n\nexport default class ResourceAction {\n  constructor(url, defaultParams, action) {\n    this.config = assignOptions({url: url}, actionDefaults, action);\n\n    if(this.config.method === 'GET') {\n      this.config.transformRequest || (this.config.transformRequest = []);\n      this.config.transformRequest.push(moveDataToParam);\n    } else if((this.config.method === 'POST' ||\n      this.config.method === 'PUT' ||\n      this.config.method === 'PATCH')) {\n      this.hasData = true;\n    }\n\n    this.route = new Route(this.config.url);\n    this.defaultParams = defaultParams;\n\n    this.extraParams = {};\n    for(let i in defaultParams) {\n      let param = defaultParams[i];\n      if(typeof param === 'function') {\n        this.extraParams[i] = param;\n      } else if(typeof param === 'string' && param[0] === '@') {\n        this.extraParams[i] = param.slice(1);\n      } else {\n        continue;\n      }\n      delete this.defaultParams[i];\n    }\n  }\n\n  buildRequest(params, data) {\n    let method = this.config.method.toLowerCase();\n    let url = this.route.reverse(params);\n\n    for(let i in this.route.match(url)) {\n      delete params[i];\n    }\n    let empty = true;\n    if(params) {\n      for(let i in params) {\n        empty = false;\n        break;\n      }\n    }\n\n    let currentRequest = request[method === 'delete' ? 'del' : method](url, null, null, this.config);\n\n    if(!empty) {\n      currentRequest.query(params);\n    }\n\n    if (data) {\n      currentRequest.send(data);\n    }\n\n    return currentRequest;\n  }\n  makeRequest(params, data) {\n    let deferred = Q.defer();\n\n    if(arguments.length == 1 && this.hasData) {\n      data = params;\n      params = undefined;\n    }\n\n    let extraP = {};\n    for(let i in this.extraParams) {\n      let p = this.extraParams[i], result;\n      if(typeof p === 'function') {\n        result = p();\n      } else {\n        result = data[p];\n      }\n      result && (extraP[i] = result);\n    }\n\n    let fullParams = assign({}, this.defaultParams, extraP, params);\n\n    this.buildRequest(fullParams, data)\n      .end((err, res) => {\n        if (err) {\n          deferred.reject(err);\n        } else {\n          deferred.resolve(res.body);\n        }\n      });\n\n    return deferred.promise;\n  }\n}","var assign = assign || require('object.assign');\n\nimport Q from 'q';\n\nimport ResourceAction from './ResourceAction.js';\nimport request from './request.js'\n\nlet superRes = {};\n\nfunction generateDefaultActions(url, defaultParams, commonOptions) {\n  let resource = {};\n\n  let action = new ResourceAction(url, defaultParams, assign({}, commonOptions));\n  resource.get = action.makeRequest.bind(action);\n  resource.query = resource.get;\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'POST'}));\n  resource.save = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'PUT'}));\n  resource.put = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'DELETE'}));\n  resource.remove = action.makeRequest.bind(action);\n  resource['delete'] = resource.remove;\n\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions, commonOptions) => {\n  let resource = generateDefaultActions(url, defaultParams, commonOptions);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      let action = new ResourceAction(url, defaultParams, assign({}, commonOptions, actions[name]));\n      resource[name] = function (...args) {\n        action.makeRequest(...args);\n      }\n    });\n  }\n  return resource;\n};\n\nsuperRes.request = request;\nsuperRes.config = request.config;\n\nsuperRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n  return (resource) => {\n    let proxiedResource = assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return wrapperFunc(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n"],"sourceRoot":"/source/"}