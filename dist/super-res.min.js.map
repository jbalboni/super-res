{"version":3,"sources":["super-res.min.js","/source/super-res.js","/source/src/utils.js","/source/src/request.js","/source/src/ResourceAction.js","/source/src/super-res.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","superRes","Q","Route","cacheManager","sa","methods","this","assignOptions","result","_len","arguments","opts","Array","_key","reduce","opt","isArray","concat","utils_js__assign","undefined","request","method","url","options","defaultOpts","curReq","accept","responseType","headers","set","timeout","clearTimeout","withCredentials","originalEnd","end","fn","_data","transformRequest","memo","transform","call","header","e","catchRequestError","promise","catchFunc","Promise","resolve","reject","then","err","res","body","transformResponse","spread","catchResponseError","moveDataToParam","data","query","generateDefaultActions","defaultParams","commonOptions","resource","action","ResourceAction","super_res__assign","get","makeRequest","bind","save","put","remove","cache","forEach","name","toUpperCase","value","req","send","ResourceAction_js__assign","actionDefaults","config","push","route","caching","store","max","ttl","params","reverse","JSON","stringify","toLowerCase","match","empty","currentRequest","_this","deferred","defer","fullParams","doRequest","buildRequest","getCacheKey","super_res__superRes","actions","getOwnPropertyNames","apply","promiseWrapper","wrapperFunc","proxiedResource","actionFunction","_len2","args","_key2","super_res"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAjiB,SAAWkB,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,KAAMA,QAAQ,gBAAiBA,QAAQ,iBAAkBA,QAAQ,cAAeA,QAAQ,YACtK,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,IAAK,eAAgB,gBAAiB,aAAc,WAAYJ,GACrHD,EAAOO,SAAWN,EAAQD,EAAOQ,EAAGR,EAAOS,MAAOT,EAAOU,aAAcV,EAAOW,GAAIX,EAAOY,UACzFC,KAAM,SAAUL,EAAGC,EAAOC,EAAcC,EAAIC,GAAW,YCFlD,SAASE,KFYZ,IAAK,GEXHC,MFWOC,EAAOC,UAAU5B,OEZG6B,EAAAC,MAAAH,GAAAI,EAAA,EAAAJ,EAAAI,EAAAA,IAAAF,EAAAE,GAAAH,UAAAG,EA2B/B,OAxBAF,GAAKG,OAAO,SAACN,EAAQO,GACnB,GAAGA,EACD,IAAI,GAAIlC,KAAKkC,GACU,gBAAXA,GAAIlC,IAA8B,OAAXkC,EAAIlC,GAChC+B,MAAMI,QAAQD,EAAIlC,KACf+B,MAAMI,QAAQR,EAAO3B,MACvB2B,EAAO3B,OAET2B,EAAO3B,GAAK2B,EAAO3B,GAAGoC,OAAOF,EAAIlC,OAGT,gBAAd2B,GAAO3B,IAAiC,OAAd2B,EAAO3B,IAAe+B,MAAMI,QAAQR,EAAO3B,OAC7E2B,EAAO3B,OAjBrBqC,EAmBmBV,EAAO3B,GAAIkC,EAAIlC,KAGbsC,SAAXJ,EAAIlC,KAAqB2B,EAAO3B,GAAKkC,EAAIlC,GAI/C,OAAO2B,IACNA,GAEIA,ECdT,QAASY,GAASC,EAAQC,EAAKC,GAC7BA,EAAUhB,EAAciB,EAAaD,EAErC,IAAIE,GAASrB,EAAGiB,EAAQC,EACxBG,GAAOC,OAAOH,EAAQI,cAClBJ,EAAQK,SACVH,EAAOI,IAAIN,EAAQK,SAGjBL,EAAQO,QACVL,EAAOK,QAAQP,EAAQO,SAEvBL,EAAOM,eAGLR,EAAQS,iBACVP,EAAOO,iBAGT,IAAIC,GAAcR,EAAOS,GAsCzB,OArCAT,GAAOS,IAAM,SAAUC,GACrB,GAAIV,EAAOW,OAAiC,gBAAjBX,GAAOW,MAChC,IACEX,EAAOW,MAAQb,EAAQc,iBAAiBvB,OACtC,SAACwB,EAAMC,GHuCL,MGvCmBA,GAAUC,KAAKf,EAAQa,EAAMb,EAAOgB,SACzDhB,EAAOW,OAET,MAAMM,GAMN,MALAnB,GAAQoB,kBAAkB7B,OACxB,SAAC8B,EAASC,GHsCR,MGtCsBD,GAAA,SAAcC,IACtC5C,EAAE6C,QAAQ,SAACC,EAASC,GHuClB,MGvC6BA,GAAON,MAEvCO,KAAKd,EAAIA,GACH7B,KAGX,MAAO2B,GAAYO,KAAKf,EAAQ,SAACyB,EAAKC,GACpC,IAAID,EAMG,CACL,IACEC,EAAIC,KAAO7B,EAAQ8B,kBAAkBvC,OACnC,SAACwB,EAAMC,GHsCL,MGtCmBA,GAAUC,KAAKW,EAAKb,IACzCa,EAAIC,MAEN,MAAMV,GACN,MAAOzC,GAAEyC,GAAGO,KAAKd,GAEnB,MAAOlC,GAAEqD,QAAQ,KAAMH,GAAMhB,GAd7BZ,EAAQgC,mBAAmBzC,OACzB,SAAC8B,EAASC,GHsCR,MGtCsBD,GAAA,SAAcC,IACtC5C,EAAE6C,QAAQ,SAACC,EAASC,GHuClB,MGvC6BA,GAAOE,MAEvCD,KAAKd,EAAIA,MAeTV,ECzDT,QAAS+B,GAAgBC,EAAMhB,GAE7B,MADAgB,IAAQnD,KAAKoD,MAAMD,GACZ,KCRT,QAASE,GAAuBrC,EAAKsC,EAAeC,GAClD,GAAIC,MAEAC,EAAS,GAAIC,GAAe1C,EAAKsC,EAZvCK,KAYiEJ,GAc/D,OAbAC,GAASI,IAAMH,EAAOI,YAAYC,KAAKL,GACvCD,EAASJ,MAAQI,EAASI,IAE1BH,EAAS,GAAIC,GAAe1C,EAAKsC,EAhBnCK,KAgB6DJ,GAAgBxC,OAAQ,UACnFyC,EAASO,KAAON,EAAOI,YAAYC,KAAKL,GAExCA,EAAS,GAAIC,GAAe1C,EAAKsC,EAnBnCK,KAmB6DJ,GAAgBxC,OAAQ,SACnFyC,EAASQ,IAAMP,EAAOI,YAAYC,KAAKL,GAEvCA,EAAS,GAAIC,GAAe1C,EAAKsC,EAtBnCK,KAsB6DJ,GAAgBxC,OAAQ,YACnFyC,EAASS,OAASR,EAAOI,YAAYC,KAAKL,GAC1CD,EAAS,UAAYA,EAASS,OAEvBT,EH1BT,GAAA5C,GAAAA,GAAuBrB,QAAQ,iBCKzB2B,GACJG,aAAc,OACdU,oBACAM,qBACAU,qBACAE,sBACAvB,iBAAiB,EACjBwC,MAAO,KA+DTnE,GAAQoE,QAAQ,SAASpD,GACvB,GAAIqD,GAAO,UAAYrD,EAAS,MAAQA,CACxCA,GAASA,EAAOsD,cAChBxF,OAAOC,eAAegC,EAASsD,GAC7BE,MAAO,SAAStD,EAAKmC,EAAMtB,EAAIZ,GACzB,kBAAsBkC,KACxBlC,EAAUY,EACVA,EAAKsB,EACLA,EAAO,KAET,IAAIoB,GAAMzD,EAAQC,EAAQC,EAAKC,EAK/B,OAJIkC,IACFoB,EAAIC,KAAKrB,GAEXtB,GAAM0C,EAAI3C,IAAIC,GACP0C,GAET7F,YAAY,MAIhBG,OAAOC,eAAegC,EAAS,UAC7BwD,MAAOpD,GCjGT,IAAAuD,GAAAA,GAAuBlF,QAAQ,iBASzBmF,GACJ3D,OAAQ,MACRgB,oBACAmC,MAAO,MAQYR,EAAA,WACR,QADQA,GACP1C,EAAKsC,EAAeG,GJmI5B1F,gBAAgBiC,KIpID0D,GAEjB1D,KAAK2E,OAAS1E,GAAee,IAAKA,GAAM0D,EAAgBjB,GAE9B,QAAvBzD,KAAK2E,OAAO5D,SACbf,KAAK2E,OAAO5C,mBAAqB/B,KAAK2E,OAAO5C,qBAC7C/B,KAAK2E,OAAO5C,iBAAiB6C,KAAK1B,IAGpClD,KAAK6E,MAAQ,GAAIjF,GAAMI,KAAK2E,OAAO3D,KACnChB,KAAKsD,cAAgBA,EAEjBtD,KAAK2E,OAAOT,SAAU,IACxBlE,KAAK2E,OAAOT,MAAQrE,EAAaiF,SAASC,MAAO,SAAUC,IAAK,IAAKC,IAAK,QJoN5E,MA5EA9G,cIrJiBuF,IJsJf3E,IAAK,cACLuF,MIvIO,SAACY,EAAQ/B,GAClB,MAAOnD,MAAK6E,MAAMM,QAAQD,GAAUE,KAAKC,UAAUlC,MJ0IjDpE,IAAK,eACLuF,MIzIQ,SAACY,EAAQ/B,GACnB,GAAIpC,GAASf,KAAK2E,OAAO5D,OAAOuE,cAC5BtE,EAAMhB,KAAK6E,MAAMM,QAAQD,EAE7B,KAAI,GAAI3G,KAAKyB,MAAK6E,MAAMU,MAAMvE,SACrBkE,GAAO3G,EAEhB,IAAIiH,IAAQ,CACZ,IAAGN,EACD,IAAI,GAAI3G,KAAK2G,GAAQ,CACnBM,GAAQ,CACR,OAIJ,GAAIC,GAAiB3E,EAAmB,WAAXC,EAAsB,MAAQA,GAAQC,EAAK,KAAM,KAAMhB,KAAK2E,OAUzF,OARIa,IACFC,EAAerC,MAAM8B,GAGnB/B,GACFsC,EAAejB,KAAKrB,GAGfsC,KJ4IL1G,IAAK,cACLuF,MI3IO,SAACY,EAAQ/B,GJ4Id,GAAIuC,GAAQ1F,KI3IZ2F,EAAWhG,EAAEiG,QACbC,EApERpB,KAoEgCzE,KAAKsD,cAAe4B,GAE5CY,EAAY,WACdJ,EAAKK,aAAaF,EAAY1C,GACzBvB,IAAI,SAACgB,EAAKC,GACLD,EACF+C,EAASjD,OAAOE,IAGZ8C,EAAKf,OAAOT,OACdwB,EAAKf,OAAOT,MAAM3C,IAAImE,EAAKM,YAAYH,EAAY1C,GAAON,EAAIC,MAGhE6C,EAASlD,QAAQI,EAAIC,SAK/B,IAAI9C,KAAK2E,OAAOT,OAA8C,QAArClE,KAAK2E,OAAO5D,OAAOuE,cAAyB,CACnE,GAAIvG,GAAMiB,KAAKgG,YAAYH,EAAY1C,EACvCnD,MAAK2E,OAAOT,MAAMN,IAAI7E,EAAK,SAAC6D,EAAK1C,GAC3B0C,EACF+C,EAASjD,OAAOE,GACP1C,EACTyF,EAASlD,QAAQvC,GAEjB4F,UAIJA,IAGF,OAAOH,GAASrD,YAjFCoB,KCpBrBC,EAAAA,GAAuBpE,QAAQ,iBAA/B0G,IAAAA,GA6BSzC,SAAW,SAACxC,EAAKsC,EAAe4C,EAAS3C,GAChD,GAAIC,GAAWH,EAAuBrC,EAAKsC,EAAeC,EAS1D,OARI2C,IACFrH,OAAOsH,oBAAoBD,GAAS/B,QAAQ,SAACC,GAC3C,GAAIX,GAAS,GAAIC,GAAe1C,EAAKsC,EAAe4C,EAAQ9B,GAC5DZ,GAASY,GAAQ,WACfX,EAAOI,YAAAuC,MAAP3C,EAAArD,cAICoD,GAvCTyC,EA0CSnF,QAAUA,EA1CnBmF,EA2CStB,OAAS7D,EAAQ6D,OA3C1BsB,EA6CSI,eAAiB,SAAwBC,GAChD,MAAO,UAAC9C,GACN,GAAI+C,GA/CR5C,KA+CqCH,EAQjC,OAPA3E,QAAOsH,oBAAoB3C,GAAUW,QAAQ,SAACC,GAC5C,GAAIoC,GAAiBD,EAAgBnC,EACrCmC,GAAgBnC,GAAQ,WLoPpB,IAAK,GAAIqC,GAAQrG,UAAU5B,OKpPMkI,EAAApG,MAAAmG,GAAAE,EAAA,EAAAF,EAAAE,EAAAA,IAAAD,EAAAC,GAAAvG,UAAAuG,EACnC,IAAIrE,GAAUkE,EAAeJ,MAAMG,EAAiBG,EACpD,OAAOJ,GAAYhE,MAGhBiE,GAvDX,IAAAK,GAAAX,CJ+RE,OAAOW","file":"super-res.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('q'), require('route-parser'), require('cache-manager'), require('superagent'), require('methods')) :\n  typeof define === 'function' && define.amd ? define(['q', 'route-parser', 'cache-manager', 'superagent', 'methods'], factory) :\n  global.superRes = factory(global.Q, global.Route, global.cacheManager, global.sa, global.methods)\n}(this, function (Q, Route, cacheManager, sa, methods) { 'use strict';\n\n  var utils_js__assign = utils_js__assign || require('object.assign');\n\n  function assignOptions(...opts) {\n    let result = {};\n\n    opts.reduce((result, opt)=> {\n      if(opt) {\n        for(let i in opt) {\n          if(typeof opt[i] === 'object' && opt[i] !== null) {\n            if(Array.isArray(opt[i])) {\n              if(!Array.isArray(result[i])) {\n                result[i] = [];\n              }\n              result[i] = result[i].concat(opt[i]);\n\n            } else {\n              if(typeof result[i] !== 'object' || result[i] === null || Array.isArray(result[i])) {\n                result[i] = {};\n              }\n              utils_js__assign(result[i], opt[i]); //1 depth merging only.\n            }\n          } else {\n            opt[i] !== undefined && (result[i] = opt[i]);\n          }\n        }\n      }\n      return result;\n    }, result);\n\n    return result;\n  }\n\n  const defaultOpts = {\n    responseType: 'json',\n    transformRequest: [],\n    catchRequestError: [],\n    transformResponse: [],\n    catchResponseError: [],\n    withCredentials: false,\n    cache: null\n  };\n\n  function request (method, url, options) {\n    options = assignOptions(defaultOpts, options);\n\n    let curReq = sa(method, url);\n    curReq.accept(options.responseType);\n    if (options.headers) {\n      curReq.set(options.headers);\n    }\n\n    if (options.timeout) {\n      curReq.timeout(options.timeout);\n    } else {\n      curReq.clearTimeout();\n    }\n\n    if (options.withCredentials) {\n      curReq.withCredentials();\n    }\n\n    let originalEnd = curReq.end;\n    curReq.end = function (fn) {\n      if (curReq._data && typeof curReq._data === 'object') {\n        try {\n          curReq._data = options.transformRequest.reduce(\n            (memo, transform) => transform.call(curReq, memo, curReq.header),\n            curReq._data\n          );\n        } catch(e) {\n          options.catchRequestError.reduce(\n            (promise, catchFunc) => promise.catch(catchFunc),\n            Q.Promise((resolve, reject) => reject(e))\n          )\n          .then(fn, fn);\n          return this;\n        }\n      }\n      return originalEnd.call(curReq, (err, res)=>{\n        if (err) {\n          options.catchResponseError.reduce(\n            (promise, catchFunc) => promise.catch(catchFunc),\n            Q.Promise((resolve, reject) => reject(err))\n          )\n          .then(fn, fn);\n        } else {\n          try {\n            res.body = options.transformResponse.reduce(\n              (memo, transform) => transform.call(res, memo),\n              res.body\n            );\n          } catch(e) {\n            return Q(e).then(fn);\n          }\n          return Q.spread([null, res], fn);\n        }\n      });\n    };\n\n    return curReq;\n  }\n\n  methods.forEach(function(method){\n    var name = 'delete' == method ? 'del' : method;\n    method = method.toUpperCase();\n    Object.defineProperty(request, name, {\n      value: function(url, data, fn, options){\n        if ('function' === typeof data) {\n          options = fn;\n          fn = data;\n          data = null;\n        }\n        var req = request(method, url, options);\n        if (data) {\n          req.send(data);\n        }\n        fn && req.end(fn);\n        return req;\n      },\n      enumerable: true\n    });\n  });\n\n  Object.defineProperty(request, 'config', {\n    value: defaultOpts\n  });\n\n  var ResourceAction_js__assign = ResourceAction_js__assign || require('object.assign');\n\n  const actionDefaults = {\n    method: 'GET',\n    transformRequest: [],\n    cache: null\n  };\n\n  function moveDataToParam(data, header) {\n    data && this.query(data);\n    return null\n  }\n\n  class ResourceAction {\n    constructor(url, defaultParams, action) {\n      this.config = assignOptions({url: url}, actionDefaults, action);\n\n      if(this.config.method === 'GET') {\n        this.config.transformRequest || (this.config.transformRequest = []);\n        this.config.transformRequest.push(moveDataToParam);\n      }\n\n      this.route = new Route(this.config.url);\n      this.defaultParams = defaultParams;\n\n      if (this.config.cache === true) {\n        this.config.cache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n      }\n    }\n    getCacheKey(params, data) {\n      return this.route.reverse(params) + JSON.stringify(data);\n    }\n    buildRequest(params, data) {\n      let method = this.config.method.toLowerCase();\n      let url = this.route.reverse(params);\n\n      for(let i in this.route.match(url)) {\n        delete params[i];\n      }\n      let empty = true;\n      if(params) {\n        for(let i in params) {\n          empty = false;\n          break;\n        }\n      }\n\n      let currentRequest = request[method === 'delete' ? 'del' : method](url, null, null, this.config);\n\n      if(!empty) {\n        currentRequest.query(params);\n      }\n\n      if (data) {\n        currentRequest.send(data);\n      }\n\n      return currentRequest;\n    }\n    makeRequest(params, data) {\n      let deferred = Q.defer();\n      let fullParams = ResourceAction_js__assign({}, this.defaultParams, params);\n\n      let doRequest = () => {\n        this.buildRequest(fullParams, data)\n            .end((err, res) => {\n              if (err) {\n                deferred.reject(err);\n              } else {\n\n                if (this.config.cache) {\n                  this.config.cache.set(this.getCacheKey(fullParams, data), res.body);\n                }\n\n                deferred.resolve(res.body);\n              }\n            });\n      };\n\n      if (this.config.cache && this.config.method.toLowerCase() === 'get') {\n        let key = this.getCacheKey(fullParams, data);\n        this.config.cache.get(key, (err, result) => {\n          if (err) {\n            deferred.reject(err);\n          } else if (result) {\n            deferred.resolve(result);\n          } else {\n            doRequest();\n          }\n        })\n      } else {\n        doRequest();\n      }\n\n      return deferred.promise;\n    }\n  }\n\n  var super_res__assign = super_res__assign || require('object.assign');\n\n  let super_res__superRes = {};\n\n  function generateDefaultActions(url, defaultParams, commonOptions) {\n    let resource = {};\n\n    let action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions));\n    resource.get = action.makeRequest.bind(action);\n    resource.query = resource.get;\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'POST'}));\n    resource.save = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'PUT'}));\n    resource.put = action.makeRequest.bind(action);\n\n    action = new ResourceAction(url, defaultParams, super_res__assign({}, commonOptions, {method: 'DELETE'}));\n    resource.remove = action.makeRequest.bind(action);\n    resource['delete'] = resource.remove;\n\n    return resource;\n  }\n\n  super_res__superRes.resource = (url, defaultParams, actions, commonOptions) => {\n    let resource = generateDefaultActions(url, defaultParams, commonOptions);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        let action = new ResourceAction(url, defaultParams, actions[name]);\n        resource[name] = function (...args) {\n          action.makeRequest(...args);\n        }\n      });\n    }\n    return resource;\n  };\n\n  super_res__superRes.request = request;\n  super_res__superRes.config = request.config;\n\n  super_res__superRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n    return (resource) => {\n      let proxiedResource = super_res__assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function (...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return wrapperFunc(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = super_res__superRes;\n\n  return super_res;\n\n}));\n","var assign = assign || require('object.assign');\n\nexport function assignOptions(...opts) {\n  let result = {};\n\n  opts.reduce((result, opt)=> {\n    if(opt) {\n      for(let i in opt) {\n        if(typeof opt[i] === 'object' && opt[i] !== null) {\n          if(Array.isArray(opt[i])) {\n            if(!Array.isArray(result[i])) {\n              result[i] = [];\n            }\n            result[i] = result[i].concat(opt[i]);\n\n          } else {\n            if(typeof result[i] !== 'object' || result[i] === null || Array.isArray(result[i])) {\n              result[i] = {};\n            }\n            assign(result[i], opt[i]); //1 depth merging only.\n          }\n        } else {\n          opt[i] !== undefined && (result[i] = opt[i]);\n        }\n      }\n    }\n    return result;\n  }, result);\n\n  return result;\n}","import Q from 'q';\nimport sa from 'superagent';\nimport methods from 'methods';\nimport {assignOptions} from './utils.js';\n\nconst defaultOpts = {\n  responseType: 'json',\n  transformRequest: [],\n  catchRequestError: [],\n  transformResponse: [],\n  catchResponseError: [],\n  withCredentials: false,\n  cache: null\n};\n\nfunction request (method, url, options) {\n  options = assignOptions(defaultOpts, options);\n\n  let curReq = sa(method, url);\n  curReq.accept(options.responseType);\n  if (options.headers) {\n    curReq.set(options.headers);\n  }\n\n  if (options.timeout) {\n    curReq.timeout(options.timeout);\n  } else {\n    curReq.clearTimeout();\n  }\n\n  if (options.withCredentials) {\n    curReq.withCredentials();\n  }\n\n  let originalEnd = curReq.end;\n  curReq.end = function (fn) {\n    if (curReq._data && typeof curReq._data === 'object') {\n      try {\n        curReq._data = options.transformRequest.reduce(\n          (memo, transform) => transform.call(curReq, memo, curReq.header),\n          curReq._data\n        );\n      } catch(e) {\n        options.catchRequestError.reduce(\n          (promise, catchFunc) => promise.catch(catchFunc),\n          Q.Promise((resolve, reject) => reject(e))\n        )\n        .then(fn, fn);\n        return this;\n      }\n    }\n    return originalEnd.call(curReq, (err, res)=>{\n      if (err) {\n        options.catchResponseError.reduce(\n          (promise, catchFunc) => promise.catch(catchFunc),\n          Q.Promise((resolve, reject) => reject(err))\n        )\n        .then(fn, fn);\n      } else {\n        try {\n          res.body = options.transformResponse.reduce(\n            (memo, transform) => transform.call(res, memo),\n            res.body\n          );\n        } catch(e) {\n          return Q(e).then(fn);\n        }\n        return Q.spread([null, res], fn);\n      }\n    });\n  };\n\n  return curReq;\n}\n\nmethods.forEach(function(method){\n  var name = 'delete' == method ? 'del' : method;\n  method = method.toUpperCase();\n  Object.defineProperty(request, name, {\n    value: function(url, data, fn, options){\n      if ('function' === typeof data) {\n        options = fn;\n        fn = data;\n        data = null;\n      }\n      var req = request(method, url, options);\n      if (data) {\n        req.send(data);\n      }\n      fn && req.end(fn);\n      return req;\n    },\n    enumerable: true\n  });\n});\n\nObject.defineProperty(request, 'config', {\n  value: defaultOpts\n});\n\nexport default request;","var assign = assign || require('object.assign');\n\nimport Q from 'q';\nimport Route from 'route-parser';\nimport cacheManager from 'cache-manager';\n\nimport request from './request.js';\nimport {assignOptions} from './utils.js'\n\nconst actionDefaults = {\n  method: 'GET',\n  transformRequest: [],\n  cache: null\n};\n\nfunction moveDataToParam(data, header) {\n  data && this.query(data);\n  return null\n}\n\nexport default class ResourceAction {\n  constructor(url, defaultParams, action) {\n    this.config = assignOptions({url: url}, actionDefaults, action);\n\n    if(this.config.method === 'GET') {\n      this.config.transformRequest || (this.config.transformRequest = []);\n      this.config.transformRequest.push(moveDataToParam);\n    }\n\n    this.route = new Route(this.config.url);\n    this.defaultParams = defaultParams;\n\n    if (this.config.cache === true) {\n      this.config.cache = cacheManager.caching({store: 'memory', max: 100, ttl: 1200});\n    }\n  }\n  getCacheKey(params, data) {\n    return this.route.reverse(params) + JSON.stringify(data);\n  }\n  buildRequest(params, data) {\n    let method = this.config.method.toLowerCase();\n    let url = this.route.reverse(params);\n\n    for(let i in this.route.match(url)) {\n      delete params[i];\n    }\n    let empty = true;\n    if(params) {\n      for(let i in params) {\n        empty = false;\n        break;\n      }\n    }\n\n    let currentRequest = request[method === 'delete' ? 'del' : method](url, null, null, this.config);\n\n    if(!empty) {\n      currentRequest.query(params);\n    }\n\n    if (data) {\n      currentRequest.send(data);\n    }\n\n    return currentRequest;\n  }\n  makeRequest(params, data) {\n    let deferred = Q.defer();\n    let fullParams = assign({}, this.defaultParams, params);\n\n    let doRequest = () => {\n      this.buildRequest(fullParams, data)\n          .end((err, res) => {\n            if (err) {\n              deferred.reject(err);\n            } else {\n\n              if (this.config.cache) {\n                this.config.cache.set(this.getCacheKey(fullParams, data), res.body);\n              }\n\n              deferred.resolve(res.body);\n            }\n          });\n    };\n\n    if (this.config.cache && this.config.method.toLowerCase() === 'get') {\n      let key = this.getCacheKey(fullParams, data);\n      this.config.cache.get(key, (err, result) => {\n        if (err) {\n          deferred.reject(err);\n        } else if (result) {\n          deferred.resolve(result);\n        } else {\n          doRequest();\n        }\n      })\n    } else {\n      doRequest();\n    }\n\n    return deferred.promise;\n  }\n}","var assign = assign || require('object.assign');\n\nimport Q from 'q';\n\nimport ResourceAction from './ResourceAction.js';\nimport request from './request.js'\n\nlet superRes = {};\n\nfunction generateDefaultActions(url, defaultParams, commonOptions) {\n  let resource = {};\n\n  let action = new ResourceAction(url, defaultParams, assign({}, commonOptions));\n  resource.get = action.makeRequest.bind(action);\n  resource.query = resource.get;\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'POST'}));\n  resource.save = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'PUT'}));\n  resource.put = action.makeRequest.bind(action);\n\n  action = new ResourceAction(url, defaultParams, assign({}, commonOptions, {method: 'DELETE'}));\n  resource.remove = action.makeRequest.bind(action);\n  resource['delete'] = resource.remove;\n\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions, commonOptions) => {\n  let resource = generateDefaultActions(url, defaultParams, commonOptions);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      let action = new ResourceAction(url, defaultParams, actions[name]);\n      resource[name] = function (...args) {\n        action.makeRequest(...args);\n      }\n    });\n  }\n  return resource;\n};\n\nsuperRes.request = request;\nsuperRes.config = request.config;\n\nsuperRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n  return (resource) => {\n    let proxiedResource = assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function (...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return wrapperFunc(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n"],"sourceRoot":"/source/"}