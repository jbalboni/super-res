{"version":3,"sources":["super-res.js","src/superagent-adapter.js","src/action-defaults.js","src/create-requestor.js","src/super-res.js"],"names":[],"mappings":"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","file":"super-res.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('q'), require('superagent'), require('route-parser'), require('cache-manager')) :\n  typeof define === 'function' && define.amd ? define(['q', 'superagent', 'route-parser', 'cache-manager'], factory) :\n  global.superRes = factory(global.Q, global.superagent, global.Route, global.cacheManager)\n}(this, function (Q, superagent, Route, cacheManager) { 'use strict';\n\n  var superagentAdapter__exports = {};\n\n  superagentAdapter__exports.configureRequest = function configureRequest(config, url, dataTransformer) {\n    const method = config.method.toLowerCase();\n    let currentRequest = superagent[method === 'delete' ? 'del' : method](url);\n\n    // Setup superagent plugins\n    if (config.plugins && config.plugins.length) {\n      config.plugins.forEach((plugin) => {\n        currentRequest = currentRequest.use(plugin);\n      });\n    }\n\n    currentRequest = currentRequest.accept(config.responseType);\n    if (config.headers) {\n      currentRequest = currentRequest.set(config.headers);\n    }\n\n    if (config.timeout) {\n      currentRequest.timeout(config.timeout);\n    } else {\n      currentRequest.clearTimeout();\n    }\n\n    if (config.withCredentials) {\n      currentRequest = currentRequest.withCredentials();\n    }\n\n    const transformedData = dataTransformer(currentRequest.header);\n    if (transformedData) {\n      if (method === 'get') {\n        currentRequest = currentRequest.query(transformedData);\n      } else {\n        currentRequest = currentRequest.send(transformedData);\n      }\n    }\n\n    return currentRequest;\n  };\n\n  superagentAdapter__exports.makeRequest = function makeRequest(request) {\n    const deferred = Q.defer();\n    request.end((err, res) => {\n      if (err) {\n        deferred.reject(err);\n      } else {\n        deferred.resolve(res);\n      }\n    });\n    return deferred.promise;\n  };\n\n  var superagentAdapter = superagentAdapter__exports;\n\n  var actionDefaults = actionDefaults = {\n    method: 'GET',\n    responseType: 'json',\n    transformRequest: [],\n    transformResponse: [],\n    withCredentials: false,\n    cache: null,\n    plugins: []\n  };\n\n  const cacheDefault = {store: 'memory', max: 100, ttl: 1200};\n  const create_requestor_js__assign = create_requestor_js__assign || require('object.assign');\n\n\n  function createResponseTransformer(transforms) {\n    return function applyResponseTransforms(response) {\n      return Q.resolve(transforms.reduce(function(memo, transform) {\n        return transform(memo, response.header);\n      }, response.body));\n    };\n  }\n\n  function applyRequestTransforms(transforms, header, data) {\n    return transforms.reduce(function(memo, transform) {\n      return transform(memo, header);\n    }, data);\n  }\n\n  //Only certain http methods can have data sent with them\n  //This could be limiting to users\n  function canHaveData(method) {\n    const methodUpper = method.toUpperCase();\n    return methodUpper === 'POST' || methodUpper === 'PUT' || methodUpper === 'PATCH';\n  }\n\n  function getParameters(defaultParamConfig) {\n    return Object.getOwnPropertyNames(defaultParamConfig)\n      .reduce((params, paramName) => {\n        let param = defaultParamConfig[paramName];\n        if (typeof param === 'function') {\n          params.derivedParams[paramName] = param;\n        } else if (typeof param === 'string' && param.startsWith('@')) {\n          params.derivedParams[paramName] = param.slice(1);\n        } else {\n          //add to default if it's not an @ or function param\n          params.defaultParams[paramName] = param;\n        }\n        return params;\n      }, {derivedParams: {}, defaultParams: {}});\n  }\n\n  function createCacheKeyGetter(route) {\n    return function getCacheKey(params, data) {\n      return route.reverse(params) + JSON.stringify(data || {});\n    }\n  }\n\n  function checkCache(method, cache, key) {\n    const deferred = Q.defer();\n    if (cache && method.toUpperCase() === 'GET') {\n      cache.get(key, (err, result) => {\n        if (err) {\n          deferred.reject(err);\n        } else if (result) {\n          deferred.resolve({found: true, result});\n        } else {\n          deferred.resolve({found: false});\n        }\n      })\n    } else {\n      deferred.resolve({found: false});\n    }\n    return deferred.promise;\n  }\n\n  function expandParams(derivedParams, defaultParams, data) {\n    return Object.getOwnPropertyNames(derivedParams)\n      .reduce((computedParams, prop) => {\n        let param = derivedParams[prop];\n        if (typeof param === 'function') {\n          computedParams[prop] = param();\n        } else {\n          computedParams[prop] = data[param];\n        }\n        return computedParams;\n      }, create_requestor_js__assign({}, defaultParams));\n  }\n\n  function createRequestTransformer(transform, data) {\n    return (header) => {\n      return data ? applyRequestTransforms(transform, header, data) : null;\n    }\n  }\n\n  /*\n   * Returns a function that will make http requests based on the configuration passed to it\n   */\n  function createRequestor(url, defaultParamConfig, action) {\n    const config = create_requestor_js__assign({url: url}, actionDefaults, action);\n    const route = new Route(config.url);\n    const {derivedParams, defaultParams} = getParameters(defaultParamConfig || {});\n    const transformResponse = createResponseTransformer(config.transformResponse);\n    const getCacheKey = createCacheKeyGetter(route);\n\n    config.cache = config.cache === true ? cacheManager.caching(cacheDefault) : config.cache;\n\n    return function(params, data) {\n      //if there's only one argument, assume it's the data instead of the second param\n      //I don't like this, but it is consistent with angular-resource\n      if (arguments.length === 1 && canHaveData(config.method)) {\n        data = params;\n        params = undefined;\n      }\n      const fullParams = create_requestor_js__assign(expandParams(derivedParams, defaultParams, data), params);\n      const url = route.reverse(fullParams);\n      //The superagent interface has two phases, configure and makeRequest. The need for this is debatable\n      const configuredHttpRequest = superagentAdapter.configureRequest(config, url, createRequestTransformer(config.transformRequest, data));\n      const cacheKey = getCacheKey(fullParams, data);\n      return checkCache(config.method, config.cache, cacheKey)\n        .then(function cacheSuccess({found, result}) {\n          if (found) {\n            return Q.resolve(result);\n          } else {\n            return superagentAdapter.makeRequest(configuredHttpRequest)\n              .then(transformResponse)\n              .then(function cacheResponse(response) {\n                if (config.cache) {\n                  config.cache.set(cacheKey, response);\n                }\n                return Q.resolve(response);\n              });\n          }\n\n        });\n    }\n  }\n\n  var super_res__assign = super_res__assign || require('object.assign');\n\n  const superRes = {};\n\n  function generateDefaultActions(url, defaultParams) {\n    const resource = {};\n\n    resource.get = createRequestor(url, defaultParams);\n    resource.query = resource.get;\n    resource.save = createRequestor(url, defaultParams, {method: 'POST'});\n    resource.put = createRequestor(url, defaultParams, {method: 'PUT'});\n    resource.remove = createRequestor(url, defaultParams, {method: 'DELETE'});\n    resource['delete'] = resource.remove;\n\n    return resource;\n  }\n\n  superRes.resource = (url, defaultParams, actions) => {\n    const resource = generateDefaultActions(url, defaultParams);\n    if (actions) {\n      Object.getOwnPropertyNames(actions).forEach((name) => {\n        resource[name] = createRequestor(url, defaultParams, actions[name]);\n      });\n    }\n    return resource;\n  };\n\n  superRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n    return (resource) => {\n      let proxiedResource = super_res__assign({}, resource);\n      Object.getOwnPropertyNames(resource).forEach((name) => {\n        let actionFunction = proxiedResource[name];\n        proxiedResource[name] = function(...args) {\n          let promise = actionFunction.apply(proxiedResource, args);\n          return wrapperFunc(promise);\n        }\n      });\n      return proxiedResource;\n    }\n  };\n\n  var super_res = superRes;\n\n  return super_res;\n\n}));\n","import request from 'superagent';\nimport Q from 'q';\n\nvar exports = {};\n\nexports.configureRequest = function configureRequest(config, url, dataTransformer) {\n  const method = config.method.toLowerCase();\n  let currentRequest = request[method === 'delete' ? 'del' : method](url);\n\n  // Setup superagent plugins\n  if (config.plugins && config.plugins.length) {\n    config.plugins.forEach((plugin) => {\n      currentRequest = currentRequest.use(plugin);\n    });\n  }\n\n  currentRequest = currentRequest.accept(config.responseType);\n  if (config.headers) {\n    currentRequest = currentRequest.set(config.headers);\n  }\n\n  if (config.timeout) {\n    currentRequest.timeout(config.timeout);\n  } else {\n    currentRequest.clearTimeout();\n  }\n\n  if (config.withCredentials) {\n    currentRequest = currentRequest.withCredentials();\n  }\n\n  const transformedData = dataTransformer(currentRequest.header);\n  if (transformedData) {\n    if (method === 'get') {\n      currentRequest = currentRequest.query(transformedData);\n    } else {\n      currentRequest = currentRequest.send(transformedData);\n    }\n  }\n\n  return currentRequest;\n};\n\nexports.makeRequest = function makeRequest(request) {\n  const deferred = Q.defer();\n  request.end((err, res) => {\n    if (err) {\n      deferred.reject(err);\n    } else {\n      deferred.resolve(res);\n    }\n  });\n  return deferred.promise;\n};\n\nexport default exports;","export default actionDefaults = {\n  method: 'GET',\n  responseType: 'json',\n  transformRequest: [],\n  transformResponse: [],\n  withCredentials: false,\n  cache: null,\n  plugins: []\n};","import Q from 'q';\nimport request from 'superagent';\nimport Route from 'route-parser';\nimport cacheManager from 'cache-manager';\n\nimport superagentAdapter from './superagent-adapter.js';\nimport actionDefaults from './action-defaults.js';\n\nconst cacheDefault = {store: 'memory', max: 100, ttl: 1200};\nconst assign = assign || require('object.assign');\n\n\nfunction createResponseTransformer(transforms) {\n  return function applyResponseTransforms(response) {\n    return Q.resolve(transforms.reduce(function(memo, transform) {\n      return transform(memo, response.header);\n    }, response.body));\n  };\n}\n\nfunction applyRequestTransforms(transforms, header, data) {\n  return transforms.reduce(function(memo, transform) {\n    return transform(memo, header);\n  }, data);\n}\n\n//Only certain http methods can have data sent with them\n//This could be limiting to users\nfunction canHaveData(method) {\n  const methodUpper = method.toUpperCase();\n  return methodUpper === 'POST' || methodUpper === 'PUT' || methodUpper === 'PATCH';\n}\n\nfunction getParameters(defaultParamConfig) {\n  return Object.getOwnPropertyNames(defaultParamConfig)\n    .reduce((params, paramName) => {\n      let param = defaultParamConfig[paramName];\n      if (typeof param === 'function') {\n        params.derivedParams[paramName] = param;\n      } else if (typeof param === 'string' && param.startsWith('@')) {\n        params.derivedParams[paramName] = param.slice(1);\n      } else {\n        //add to default if it's not an @ or function param\n        params.defaultParams[paramName] = param;\n      }\n      return params;\n    }, {derivedParams: {}, defaultParams: {}});\n}\n\nfunction createCacheKeyGetter(route) {\n  return function getCacheKey(params, data) {\n    return route.reverse(params) + JSON.stringify(data || {});\n  }\n}\n\nfunction checkCache(method, cache, key) {\n  const deferred = Q.defer();\n  if (cache && method.toUpperCase() === 'GET') {\n    cache.get(key, (err, result) => {\n      if (err) {\n        deferred.reject(err);\n      } else if (result) {\n        deferred.resolve({found: true, result});\n      } else {\n        deferred.resolve({found: false});\n      }\n    })\n  } else {\n    deferred.resolve({found: false});\n  }\n  return deferred.promise;\n}\n\nfunction expandParams(derivedParams, defaultParams, data) {\n  return Object.getOwnPropertyNames(derivedParams)\n    .reduce((computedParams, prop) => {\n      let param = derivedParams[prop];\n      if (typeof param === 'function') {\n        computedParams[prop] = param();\n      } else {\n        computedParams[prop] = data[param];\n      }\n      return computedParams;\n    }, assign({}, defaultParams));\n}\n\nfunction createRequestTransformer(transform, data) {\n  return (header) => {\n    return data ? applyRequestTransforms(transform, header, data) : null;\n  }\n}\n\n/*\n * Returns a function that will make http requests based on the configuration passed to it\n */\nexport default function createRequestor(url, defaultParamConfig, action) {\n  const config = assign({url: url}, actionDefaults, action);\n  const route = new Route(config.url);\n  const {derivedParams, defaultParams} = getParameters(defaultParamConfig || {});\n  const transformResponse = createResponseTransformer(config.transformResponse);\n  const getCacheKey = createCacheKeyGetter(route);\n\n  config.cache = config.cache === true ? cacheManager.caching(cacheDefault) : config.cache;\n\n  return function(params, data) {\n    //if there's only one argument, assume it's the data instead of the second param\n    //I don't like this, but it is consistent with angular-resource\n    if (arguments.length === 1 && canHaveData(config.method)) {\n      data = params;\n      params = undefined;\n    }\n    const fullParams = assign(expandParams(derivedParams, defaultParams, data), params);\n    const url = route.reverse(fullParams);\n    //The superagent interface has two phases, configure and makeRequest. The need for this is debatable\n    const configuredHttpRequest = superagentAdapter.configureRequest(config, url, createRequestTransformer(config.transformRequest, data));\n    const cacheKey = getCacheKey(fullParams, data);\n    return checkCache(config.method, config.cache, cacheKey)\n      .then(function cacheSuccess({found, result}) {\n        if (found) {\n          return Q.resolve(result);\n        } else {\n          return superagentAdapter.makeRequest(configuredHttpRequest)\n            .then(transformResponse)\n            .then(function cacheResponse(response) {\n              if (config.cache) {\n                config.cache.set(cacheKey, response);\n              }\n              return Q.resolve(response);\n            });\n        }\n\n      });\n  }\n}\n","var assign = assign || require('object.assign');\n\nimport createRequestor from './create-requestor.js';\n\nconst superRes = {};\n\nfunction generateDefaultActions(url, defaultParams) {\n  const resource = {};\n\n  resource.get = createRequestor(url, defaultParams);\n  resource.query = resource.get;\n  resource.save = createRequestor(url, defaultParams, {method: 'POST'});\n  resource.put = createRequestor(url, defaultParams, {method: 'PUT'});\n  resource.remove = createRequestor(url, defaultParams, {method: 'DELETE'});\n  resource['delete'] = resource.remove;\n\n  return resource;\n}\n\nsuperRes.resource = (url, defaultParams, actions) => {\n  const resource = generateDefaultActions(url, defaultParams);\n  if (actions) {\n    Object.getOwnPropertyNames(actions).forEach((name) => {\n      resource[name] = createRequestor(url, defaultParams, actions[name]);\n    });\n  }\n  return resource;\n};\n\nsuperRes.promiseWrapper = function promiseWrapper(wrapperFunc) {\n  return (resource) => {\n    let proxiedResource = assign({}, resource);\n    Object.getOwnPropertyNames(resource).forEach((name) => {\n      let actionFunction = proxiedResource[name];\n      proxiedResource[name] = function(...args) {\n        let promise = actionFunction.apply(proxiedResource, args);\n        return wrapperFunc(promise);\n      }\n    });\n    return proxiedResource;\n  }\n};\n\nexport default superRes;\n"],"sourceRoot":"/source/"}